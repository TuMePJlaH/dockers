#!/usr/bin/env python3
import argparse
import shlex
from subprocess import run
from pathlib import Path

IMAGE_NAME = "stablediffusion"
TAG_NAME = "latest"
NAME = "stabled"

def build(args):
    unknown_args = shlex.join(args["unknown"])
    Path('./models').mkdir(exist_ok=True)
    run(
        (
            "docker build "
            "--network host "
            f"-t {IMAGE_NAME}:{TAG_NAME} "
            f"{unknown_args} "
            ". "
        ),
        shell=True,
        check=True,
    )

def start(args):
    unknown_args = shlex.join(args["unknown"])

    run(["docker", "compose", "up", "-d"])

def attach(args):
    run(["docker", "exec", "-it", f"{NAME}", "bash"])

def stop(args):
    run(["docker", "compose", "stop",])

def remove(args):
    run(["docker", "rm", NAME])

def main():
    parser = argparse.ArgumentParser(description="Build and run evonets docker images")
    subparsers = parser.add_subparsers(title="subcommands", description="valid subcommands")

    build_parser = subparsers.add_parser("build", aliases=["b"], help="build docker image")
    build_parser.set_defaults(func=build)

    run_parser = subparsers.add_parser("start", aliases=["u"], help="docker compose up")
    run_parser.set_defaults(func=start)

    attach_parser = subparsers.add_parser( "attach", aliases=["a"], help="go inside the running container" )
    attach_parser.set_defaults(func=attach)

    stop_parser = subparsers.add_parser( "stop", aliases=["s"], help="docker compose stop")
    stop_parser.set_defaults(func=stop)

    remove_parser = subparsers.add_parser( "remove", aliases=["rm"], help="remove container")
    remove_parser.set_defaults(func=remove)

    args = dict(zip(("args", "unknown"), parser.parse_known_args()))
    if not vars(args["args"]):
        parser.print_usage()
    else:
        args["args"].func(args)

if __name__ == "__main__":
    main()
